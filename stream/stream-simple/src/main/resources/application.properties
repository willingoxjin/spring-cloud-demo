spring.application.name=stream-simple
server.port=43000

# RabbitMQ
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=rabbitmq123456

management.security.enabled=false
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# \u7ED1\u5B9AChannel\u5230broadcast
spring.cloud.stream.bindings.myTopic-consumer.destination=broadcast
spring.cloud.stream.bindings.myTopic-producer.destination=broadcast

# \u6D88\u606F\u5206\u7EC4\u914D\u7F6E
spring.cloud.stream.bindings.group-consumer.destination=group-topic
spring.cloud.stream.bindings.group-producer.destination=group-topic
spring.cloud.stream.bindings.group-consumer.group=My-Group-A

## \u6D88\u606F\u5206\u533A\u914D\u7F6E
## \u6253\u5F00\u6D88\u8D39\u8005\u7684\u6D88\u8D39\u5206\u533A\u529F\u80FD
spring.cloud.stream.bindings.group-consumer.consumer.partitioned=true
## \u4E24\u4E2A\u6D88\u606F\u5206\u533A
spring.cloud.stream.bindings.group-producer.producer.partition-count=2
# SpEL (Key resolver) \u53EF\u4EE5\u5B9A\u4E49\u590D\u6742\u8868\u8FBE\u5F0F\u751F\u6210Key
# \u6211\u4EEC\u8FD9\u91CC\u7528\u6700\u7B80\u5316\u7684\u914D\u7F6E\uFF0C\u53EA\u6709\u7D22\u5F15\u53C2\u6570\u4E3A1\u7684\u8282\u70B9\uFF08\u6D88\u8D39\u8005\uFF09\uFF0C\u624D\u80FD\u6D88\u8D39\u6D88\u606F
spring.cloud.stream.bindings.group-producer.producer.partition-key-expression=1
# \u5F53\u524D\u6D88\u8D39\u8005\u5B9E\u4F8B\u603B\u6570
spring.cloud.stream.instanceCount=2
# \u5F53\u524D\u5B9E\u4F8B\u7684\u7D22\u5F15\u53F7
spring.cloud.stream.instanceIndex=0


# \u5EF6\u8FDF\u6D88\u606F\u914D\u7F6E
spring.cloud.stream.bindings.delayed-consumer.destination=delayed-topic
spring.cloud.stream.bindings.delayed-producer.destination=delayed-topic
# \u4FE1\u9053 delayed-producer \u5F00\u542F\u5EF6\u8FDF\u6D88\u606F
spring.cloud.stream.rabbit.bindings.delayed-producer.producer.delayed-exchange=true
# exchange \u7C7B\u578B\uFF1A\u5EF6\u8FDF\u6D88\u606F\uFF0C\u53EF\u4E0D\u914D\u7F6E
spring.cloud.stream.rabbit.bindings.delayed-producer.producer.exchange-type=x-delayed-message


# \u5F02\u5E38\u6D88\u606F\uFF08\u672C\u673A\u6D88\u8D39\u7AEF\u91CD\u8BD5\uFF09
spring.cloud.stream.bindings.error-consumer.destination=error-out-topic
spring.cloud.stream.bindings.error-producer.destination=error-out-topic
# \u91CD\u8BD5\u6B21\u6570\uFF08\u672C\u673A\u6D88\u8D39\u7AEF\u91CD\u8BD5\uFF09\uFF1B\u9ED8\u8BA4\u4E3A3
# \u6B21\u6570=1\u76F8\u5F53\u4E8E\u4E0D\u91CD\u8BD5
spring.cloud.stream.bindings.error-consumer.consumer.max-attempts=5


# \u5F02\u5E38\u6D88\u606F\uFF08requeue\u91CD\u8BD5\uFF09
spring.cloud.stream.bindings.requeue-consumer.destination=requeue-topic
spring.cloud.stream.bindings.requeue-producer.destination=requeue-topic
# \u5FC5\u987B\u628Amax-attempts\u8BBE\u7F6E\u4E3A1\uFF0C\u5426\u5219requeue\u4E0D\u80FD\u751F\u6548
spring.cloud.stream.bindings.requeue-consumer.consumer.max-attempts=1
spring.cloud.stream.bindings.requeue-consumer.group=requeue-group
# \u4EC5\u5BF9\u5F53\u524Drequeue-consumer\uFF0C\u5F00\u542Frequeue
#spring.cloud.stream.rabbit.bindings.requeue-consumer.consumer.requeue-rejected=true
# \u6D88\u8D39\u5931\u8D25\uFF0C\u8FDB\u5165\u6B7B\u4FE1\u961F\u5217\uFF0C\u5982\u4E0D\u914D\u7F6E\uFF0C\u91CD\u56DE\u961F\u5217\u4F1A\u5931\u8D25
spring.cloud.stream.rabbit.bindings.requeue-consumer.consumer.republish-to-dlq=false
# \u5168\u5C40\u5F00\u542F requeue
# TODO


# \u6B7B\u4FE1\u961F\u5217\u914D\u7F6E
spring.cloud.stream.bindings.dlq-consumer.destination=dlq-topic
spring.cloud.stream.bindings.dlq-producer.destination=dlq-topic
spring.cloud.stream.bindings.dlq-consumer.consumer.max-attempts=2
spring.cloud.stream.bindings.dlq-consumer.group=dlq-group
# \u5F00\u542F\u81EA\u52A8\u7ED1\u5B9A\u6B7B\u4FE1\u961F\u5217\uFF08\u9ED8\u8BA4 topic.dlq\uFF09
spring.cloud.stream.rabbit.bindings.dlq-consumer.consumer.auto-bind-dlq=true
# \u9ED8\u8BA4\u4E3A true
spring.cloud.stream.rabbit.bindings.dlq-consumer.consumer.republish-to-dlq=true


# Fallback\u914D\u7F6E
spring.cloud.stream.bindings.fallback-consumer.destination=fallback-topic
spring.cloud.stream.bindings.fallback-producer.destination=fallback-topic
spring.cloud.stream.bindings.fallback-consumer.consumer.max-attempts=2
spring.cloud.stream.bindings.fallback-consumer.group=fallback-group
# input channel ->    fallback-topic.fallback-group.errors